"""
    Copyright 2013 KU Leuven Research and Development - iMinds - Distrinet

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Administrative Contact: dnet-project-office@cs.kuleuven.be
    Technical Contact: bart.vanbrabant@cs.kuleuven.be
"""

entity Key:
    """
        A public ssh-key used to access virtual machine

        :param public_key The actual public key that needs to be deployed
        :param name An identifier for the public key
    """
    string public_key
    string name
end

implement Key using std::none

Key public_key [1] -- [0:] vm::Host vm

entity SSHServer extends ip::services::Server:
    """
        A ssh server
    """
end

ssh_range = ip::Port(low = 22)
ssh_server = ip::DstService(proto = "tcp", dst_range = ssh_range)

typedef Server as SSHServer(services = [ssh::ssh_server])

implementation sshServer for SSHServer:
    pkg = std::Package(host = host, name = "openssh-server", state = "installed")
    svc = std::Service(host = host, name = "sshd", state = "running", onboot = true, requires = [pkg, cfg])
    cfg = std::ConfigFile(host = host, path = "/etc/ssh/sshd_config", content = std::template("ssh/sshd_config.tmpl"))
end

implement SSHServer using sshServer

entity SSHUser:
    """
        An ssh users allows authorized keys to be installed
    """
    string home_dir
    string user
    string group
end

Key ssh_keys [0:] -- [0:] SSHUser ssh_users
std::Host host [1] -- [0:] SSHUser ssh_users

index SSHUser(host, home_dir)

implementation sshUser for SSHUser:
    dir = std::Directory(host = self.host, path = "{{ home_dir }}/.ssh", mode = 700, owner = user, group = group)
    file = std::File(host = host, mode = 600, owner = user, requires = dir, group = group,
        content = std::template("ssh/authorized_keys"), path = "{{ home_dir }}/.ssh/authorized_keys")
end

implement SSHUser using sshUser

